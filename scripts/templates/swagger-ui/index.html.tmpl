<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css" />
    <link
      rel="icon"
      type="image/png"
      href="./favicon-32x32.png"
      sizes="32x32"
    />
    <link
      rel="icon"
      type="image/png"
      href="./favicon-16x16.png"
      sizes="16x16"
    />
    <style>
      html {
        box-sizing: border-box;
        overflow: -moz-scrollbars-vertical;
        overflow-y: scroll;
      }

      *,
      *:before,
      *:after {
        box-sizing: inherit;
      }

      body {
        margin: 0;
        background: #fafafa;
      }
    </style>
  </head>

  <body>
    <div id="swagger-ui"></div>

    <script src="./swagger-ui-bundle.js" charset="UTF-8"></script>
    <script src="./swagger-ui-standalone-preset.js" charset="UTF-8"></script>
    <script>
      window.onload = function () {
        console.log(window.location.href);
        const searchParam = new URLSearchParams(window.location.search);
        // Begin Swagger UI call region
        const ui = SwaggerUIBundle({
          url: !!searchParam.get("endpoint")
            ? "./endpoints/" + searchParam.get("endpoint") + ".json"
            : "./endpoints/localhost.json",
          dom_id: "#swagger-ui",
          deepLinking: true,
          presets: [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset],
          plugins: [SwaggerUIBundle.plugins.DownloadUrl],
          layout: "StandaloneLayout",
        });
        // End Swagger UI call region

        window.ui = ui;

        // add suggestion
        const downloadSuggestId = "endpoint-suggestion";
        const downloadUrlInput = document.querySelector(".download-url-input");
        downloadUrlInput.setAttribute("autocomplete", "on");
        downloadUrlInput.setAttribute("list", downloadSuggestId);
        const suggestions = ${suggestions};
        const suggestElement = document.createElement("datalist");
        suggestElement.id = downloadSuggestId;
        suggestions.forEach(function (suggestion) {
          const option = document.createElement("option");
          option.value = suggestion;
          suggestElement.appendChild(option);
        });
        downloadUrlInput.parentNode.insertBefore(
          suggestElement,
          downloadUrlInput.nextSibling
        );
      };
    </script>
  </body>
</html>
